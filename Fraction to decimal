class Solution {
    public String fractionToDecimal(int numerator, int denominator) 
    {
        // double res=0.0;
        // res=(double)numerator/denominator;
        // if(res==(int)res)
        // {
        //     return String.valueOf((int)res);
        // }
        // String r=Double.toString(res);
        // StringBuilder sb=new StringBuilder();
        // int count=0;
        // int x=0;
        // for(int i=0;i<r.length();i++)
        // {
        //     if(r.charAt(i)=='.'&r.length()>i+2)
        //     {
        //         x++;
        //         sb.append(".");
        //         sb.append("(");
        //         count++;
        //     }
        //     else if(r.length()==i+1& count==1)
        //     {
        //         sb.append(")");
        //     }
        //     else
        //     {
        //         sb.append(r.charAt(i));
        //         x++;
                
        //     }
        //     if(x==5)
        //         {
        //             sb.append(")");
        //             break;
        //         }
        // }
        // return sb.toString();

         if(numerator == 0){
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        sb.append(((numerator > 0) ^ (denominator > 0))? "-":"");
        long num = Math.abs((long) numerator);
        long den = Math.abs((long) denominator);

        sb.append(num / den);
        num %= den;
        if(num == 0){
            return sb.toString();
        }

        sb.append(".");
        HashMap<Long,Integer> map = new HashMap<Long,Integer>();
        map.put(num,sb.length());
        while(num != 0){
            num *= 10;
            sb.append(num / den);
            num %= den;
            if(map.containsKey(num)){
                int index = map.get(num);
                sb.insert(index,"(");
                sb.append(")");
                break;
            } else {
                map.put(num, sb.length());
            }
        }
        return sb.toString();

    }
}
